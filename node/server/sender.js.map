{"version":3,"sources":["sender.js"],"names":["Sender","item_num","url","cache","cache_size","queue","que_interval","req_interval","udpPort","osc","UDPPort","localAddress","localPort","metadata","open","setInterval","req","setTimeout","dequeue","console","log","r","json","data_new","cnt_new","i","length","id","ci","indexOf","push","d","s","type","event","substr","actor","login","img","avatar_url","repo","name","date","created_at","slice","Math","floor","forEach","el","arry","delta","concat","err","wait_time","c","sendOsc","shift","args","value","send","address"],"mappings":"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","file":"sender.js","sourcesContent":["import osc from 'osc'\r\nimport https from 'https'\r\nimport fetch from 'node-fetch'\r\n\r\nexport default class Sender {\r\n    constructor(){\r\n\r\n        const item_num = 50;\r\n\r\n        this.url = 'https://api.github.com/events';\r\n        this.url += '?access_token=2bd8ac40da75af79216f63ca3a2f86f4cd85416b';\r\n        this.url += '&per_page=' + item_num;\r\n\r\n        this.cache = [];\r\n        this.cache_size = 100;\r\n\r\n        this.queue = [];\r\n\r\n        this.que_interval = 100;\r\n        this.req_interval = 1000;\r\n\r\n        this.udpPort = new osc.UDPPort({\r\n            localAddress: '0.0.0.0',\r\n            localPort: 7401,\r\n            metadata: true\r\n        });\r\n        this.udpPort.open();\r\n    }\r\n\r\n    init() {\r\n        setInterval(() => { this.req(this.url); }, this.req_interval);\r\n        setTimeout(() => { this.dequeue(); }, 2000);\r\n        console.log('running...')\r\n    }\r\n\r\n    async req(url) {\r\n        try {\r\n            const r = await fetch(url);\r\n            const json = await r.json();\r\n\r\n            let data_new = [];\r\n            let cnt_new = 0;\r\n\r\n            for (let i = 0; i < json.length; i++) {\r\n\r\n                let id = json[i].id;\r\n                let ci = this.cache.indexOf(id);\r\n                if (ci < 0) {\r\n                    cnt_new++;\r\n                    this.cache.push(id);\r\n\r\n                    let d = {};\r\n                    d.id = json[i].id;\r\n                    let s = json[i].type;\r\n                    d.event = s.substr(0, s.length-5);\r\n                    d.actor = json[i].actor.login;\r\n                    d.img = json[i].actor.avatar_url;\r\n                    d.repo = json[i].repo.name;\r\n                    d.date = json[i].created_at;\r\n\r\n                    data_new.push(d);\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (this.cache.length > this.cache_size) {\r\n                this.cache = this.cache.slice(this.cache.length - this.cache_size, this.cache.length);\r\n            }\r\n\r\n            //console.log('new:', cnt_new);\r\n            this.que_interval = cnt_new === 0 ? 100 : Math.floor(1000 / cnt_new);\r\n            //console.log('delta:', this.que_interval);\r\n\r\n            data_new.forEach((el, i, arry) => {\r\n                arry[i].delta = this.que_interval;\r\n            });\r\n            this.queue = this.queue.concat(data_new);\r\n\r\n            //console.log('----');\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    dequeue() {\r\n\r\n        let wait_time = 500;\r\n\r\n        if (this.queue.length > 0) {\r\n            let c = this.queue[0];\r\n            wait_time = this.queue[0].delta;\r\n            this.sendOsc(c);\r\n            this.queue.shift();\r\n        }\r\n\r\n        // next queue\r\n        setTimeout(() => {\r\n            this.dequeue();\r\n        }, wait_time);\r\n    }\r\n\r\n    async sendOsc(d) {\r\n        let args = [\r\n            //{ type: 's', value: d.id },\r\n            { type: 's', value: d.event },\r\n            { type: 's', value: d.actor },\r\n            //{ type: 's', value: d.img },\r\n            { type: 's', value: d.repo }\r\n        ];\r\n\r\n        await this.udpPort.send({\r\n            address: '/new',\r\n            args: args\r\n        }, '127.0.0.1', 7402);\r\n\r\n        //console.log(args);\r\n    }\r\n\r\n};\r\n"]}